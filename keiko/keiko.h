/* Header file -- generated by iset.tcl */

#define NTEMPLATES 290
#define NTRIE 1011
#define MAXARGS 2

#define __INSTRS__(i) \
     i(ILLEGAL) \
     i(PUSH) \
     i(LDKW) \
     i(LDKF) \
     i(LOCAL) \
     i(OFFSET) \
     i(INDEXS) \
     i(INDEXW) \
     i(INDEXD) \
     i(LOADW) \
     i(LOADS) \
     i(LOADC) \
     i(LOADF) \
     i(STOREW) \
     i(STORES) \
     i(STOREC) \
     i(STOREF) \
     i(LDLW, I_LOCAL|IARG, I_LOADW) \
     i(LDLS, I_LOCAL|IARG, I_LOADS) \
     i(LDLC, I_LOCAL|IARG, I_LOADC) \
     i(LDLF, I_LOCAL|IARG, I_LOADF) \
     i(STLW, I_LOCAL|IARG, I_STOREW) \
     i(STLS, I_LOCAL|IARG, I_STORES) \
     i(STLC, I_LOCAL|IARG, I_STOREC) \
     i(STLF, I_LOCAL|IARG, I_STOREF) \
     i(LDGW, I_LDKW|IARG, I_LOADW) \
     i(LDGS, I_LDKW|IARG, I_LOADS) \
     i(LDGC, I_LDKW|IARG, I_LOADC) \
     i(LDGF, I_LDKW|IARG, I_LOADF) \
     i(STGW, I_LDKW|IARG, I_STOREW) \
     i(STGS, I_LDKW|IARG, I_STORES) \
     i(STGC, I_LDKW|IARG, I_STOREC) \
     i(STGF, I_LDKW|IARG, I_STOREF) \
     i(LDNW, I_PUSH|IARG, I_OFFSET, I_LOADW) \
     i(STNW, I_PUSH|IARG, I_OFFSET, I_STOREW) \
     i(LDIW, I_INDEXW, I_LOADW) \
     i(LDIS, I_INDEXS, I_LOADS) \
     i(LDIC, I_OFFSET, I_LOADC) \
     i(LDIF, I_INDEXW, I_LOADF) \
     i(STIW, I_INDEXW, I_STOREW) \
     i(STIS, I_INDEXS, I_STORES) \
     i(STIC, I_OFFSET, I_STOREC) \
     i(STIF, I_INDEXW, I_STOREF) \
     i(LOADD) \
     i(STORED) \
     i(LDKD) \
     i(LOADQ) \
     i(STOREQ) \
     i(LDKQ) \
     i(LDID) \
     i(STID) \
     i(LDLD) \
     i(STLD) \
     i(LDGD) \
     i(STGD) \
     i(LDIQ) \
     i(STIQ) \
     i(LDLQ) \
     i(STLQ) \
     i(LDGQ) \
     i(STGQ) \
     i(INCL, I_LDLW|IARG, I_INC, I_STLW|IARG) \
     i(DECL, I_LDLW|IARG, I_DEC, I_STLW|IARG) \
     i(DUP) \
     i(SWAP) \
     i(POP) \
     i(PLUS) \
     i(MINUS) \
     i(TIMES) \
     i(UMINUS) \
     i(AND) \
     i(OR) \
     i(NOT) \
     i(INC, I_PUSH|ICON, 1, I_PLUS) \
     i(DEC, I_PUSH|ICON, 1, I_MINUS) \
     i(BITAND) \
     i(BITOR) \
     i(BITXOR) \
     i(BITNOT) \
     i(LSL) \
     i(LSR) \
     i(ASR) \
     i(ROR) \
     i(DIV) \
     i(MOD) \
     i(EQ) \
     i(LT) \
     i(GT) \
     i(LEQ) \
     i(GEQ) \
     i(NEQ) \
     i(JEQ) \
     i(JLT) \
     i(JGT) \
     i(JLEQ) \
     i(JGEQ) \
     i(JNEQ) \
     i(JLTZ, I_PUSH|ICON, 0, I_JLT|IARG) \
     i(JGTZ, I_PUSH|ICON, 0, I_JGT|IARG) \
     i(JLEQZ, I_PUSH|ICON, 0, I_JLEQ|IARG) \
     i(JGEQZ, I_PUSH|ICON, 0, I_JGEQ|IARG) \
     i(JNEQZ, I_PUSH|ICON, 0, I_JNEQ|IARG) \
     i(JEQZ, I_PUSH|ICON, 0, I_JEQ|IARG) \
     i(JUMP) \
     i(QPLUS) \
     i(QMINUS) \
     i(QTIMES) \
     i(QUMINUS) \
     i(QDIV) \
     i(QMOD) \
     i(QINC) \
     i(QDEC) \
     i(QCMP) \
     i(QEQ) \
     i(QLT) \
     i(QGT) \
     i(QLEQ) \
     i(QGEQ) \
     i(QNEQ) \
     i(QJEQ) \
     i(QJLT) \
     i(QJGT) \
     i(QJLEQ) \
     i(QJGEQ) \
     i(QJNEQ) \
     i(JCASE) \
     i(CASEL) \
     i(JRANGE) \
     i(TESTGEQ) \
     i(FPLUS) \
     i(FMINUS) \
     i(FTIMES) \
     i(FDIV) \
     i(FUMINUS) \
     i(FCMPL) \
     i(FCMPG) \
     i(FEQ) \
     i(FNEQ) \
     i(FLT) \
     i(FGT) \
     i(FLEQ) \
     i(FGEQ) \
     i(FJEQ) \
     i(FJNEQ) \
     i(FJLT) \
     i(FJGT) \
     i(FJLEQ) \
     i(FJGEQ) \
     i(FJNLT) \
     i(FJNGT) \
     i(FJNLEQ) \
     i(FJNGEQ) \
     i(DPLUS) \
     i(DMINUS) \
     i(DTIMES) \
     i(DDIV) \
     i(DUMINUS) \
     i(DCMPL) \
     i(DCMPG) \
     i(DEQ) \
     i(DNEQ) \
     i(DLT) \
     i(DGT) \
     i(DLEQ) \
     i(DGEQ) \
     i(DJEQ) \
     i(DJNEQ) \
     i(DJLT) \
     i(DJGT) \
     i(DJLEQ) \
     i(DJGEQ) \
     i(DJNLT) \
     i(DJNGT) \
     i(DJNLEQ) \
     i(DJNGEQ) \
     i(CONVNF) \
     i(CONVND) \
     i(CONVFN) \
     i(CONVDN) \
     i(CONVFD) \
     i(CONVDF) \
     i(CONVNC) \
     i(CONVNS) \
     i(CONVNQ) \
     i(CONVQN) \
     i(CONVQD) \
     i(BOUND) \
     i(NCHECK) \
     i(GCHECK) \
     i(ZCHECK) \
     i(FZCHECK) \
     i(DZCHECK) \
     i(QZCHECK) \
     i(ERROR) \
     i(ALIGNC) \
     i(ALIGNS) \
     i(FIXCOPY) \
     i(FLEXCOPY) \
     i(CALL) \
     i(CALLW) \
     i(CALLQ) \
     i(CALLF) \
     i(CALLD) \
     i(STATLINK) \
     i(SAVELINK) \
     i(JPROC) \
     i(SLIDE) \
     i(SLIDEW) \
     i(SLIDEF) \
     i(SLIDED) \
     i(SLIDEQ) \
     i(RETURN) \
     i(LNUM) \
     i(BREAK) \
     i(RETURNW) \
     i(CASEJUMP) \
     i(CASEARM) \
     i(PACK) \
     i(UNPACK)

#define __i1__(sym, ...) I_##sym,
enum { __INSTRS__(__i1__) };

#define __DIRS__(d) \
     d(ILLEGAL) \
     d(CONST) \
     d(FCONST) \
     d(DCONST) \
     d(QCONST) \
     d(GLOBAL) \
     d(LABEL) \
     d(PROC) \
     d(END) \
     d(PRIMDEF) \
     d(DEFINE) \
     d(STRING) \
     d(GLOVAR) \
     d(WORD) \
     d(LONG) \
     d(FLOAT) \
     d(DOUBLE) \
     d(MODULE) \
     d(ENDHDR) \
     d(IMPORT) \
     d(STKMAP) \
     d(LINE) \
     d(PCALL) \
     d(PCALLW)

#define __d1__(sym) D_##sym,
enum { __DIRS__(__d1__) };

#define K_ILLEGAL 0
#define K_PUSH_x1 1
#define K_PUSH_1 13
#define K_PUSH_2 14
#define K_LDKW_1 15
#define K_LDKW_2 16
#define K_LDKF_1 17
#define K_LDKF_2 18
#define K_LOCAL_x1 19
#define K_LOCAL_1 20
#define K_LOCAL_2 21
#define K_OFFSET 22
#define K_INDEXS 23
#define K_INDEXW 24
#define K_INDEXD 25
#define K_LOADW 26
#define K_LOADS 27
#define K_LOADC 28
#define K_LOADF 29
#define K_STOREW 30
#define K_STORES 31
#define K_STOREC 32
#define K_STOREF 33
#define K_LDLW_x1 34
#define K_LDLW_x2 40
#define K_LDLW_1 46
#define K_LDLW_2 47
#define K_LDLS_1 48
#define K_LDLS_2 49
#define K_LDLC_1 50
#define K_LDLC_2 51
#define K_LDLF_1 52
#define K_LDLF_2 53
#define K_STLW_x1 54
#define K_STLW_x2 60
#define K_STLW_1 66
#define K_STLW_2 67
#define K_STLS_1 68
#define K_STLS_2 69
#define K_STLC_1 70
#define K_STLC_2 71
#define K_STLF_1 72
#define K_STLF_2 73
#define K_LDGW_K 74
#define K_LDGW_L 75
#define K_LDGS_K 76
#define K_LDGS_L 77
#define K_LDGC_K 78
#define K_LDGC_L 79
#define K_LDGF_K 80
#define K_LDGF_L 81
#define K_STGW_K 82
#define K_STGW_L 83
#define K_STGS_K 84
#define K_STGS_L 85
#define K_STGC_K 86
#define K_STGC_L 87
#define K_STGF_K 88
#define K_STGF_L 89
#define K_LDNW_x1 90
#define K_LDNW_1 103
#define K_LDNW_2 104
#define K_STNW_x1 105
#define K_STNW_1 118
#define K_STNW_2 119
#define K_LDIW 120
#define K_LDIS 121
#define K_LDIC 122
#define K_LDIF 123
#define K_STIW 124
#define K_STIS 125
#define K_STIC 126
#define K_STIF 127
#define K_LOADD 128
#define K_STORED 129
#define K_LDKD_1 130
#define K_LDKD_2 131
#define K_LOADQ 132
#define K_STOREQ 133
#define K_LDKQ_1 134
#define K_LDKQ_2 135
#define K_INCL_1 136
#define K_DECL_1 137
#define K_DUP 138
#define K_SWAP 141
#define K_POP_1 142
#define K_PLUS 143
#define K_MINUS 144
#define K_TIMES 145
#define K_UMINUS 146
#define K_AND 147
#define K_OR 148
#define K_NOT 149
#define K_INC 150
#define K_DEC 151
#define K_BITAND 152
#define K_BITOR 153
#define K_BITXOR 154
#define K_BITNOT 155
#define K_LSL 156
#define K_LSR 157
#define K_ASR 158
#define K_ROR 159
#define K_DIV 160
#define K_MOD 161
#define K_EQ 162
#define K_LT 163
#define K_GT 164
#define K_LEQ 165
#define K_GEQ 166
#define K_NEQ 167
#define K_JEQ_S 168
#define K_JEQ_R 169
#define K_JLT_S 170
#define K_JLT_R 171
#define K_JGT_S 172
#define K_JGT_R 173
#define K_JLEQ_S 174
#define K_JLEQ_R 175
#define K_JGEQ_S 176
#define K_JGEQ_R 177
#define K_JNEQ_S 178
#define K_JNEQ_R 179
#define K_JLTZ_S 180
#define K_JGTZ_S 181
#define K_JLEQZ_S 182
#define K_JGEQZ_S 183
#define K_JNEQZ_S 184
#define K_JNEQZ_R 185
#define K_JEQZ_S 186
#define K_JEQZ_R 187
#define K_JUMP_S 188
#define K_JUMP_R 189
#define K_QPLUS 190
#define K_QMINUS 191
#define K_QTIMES 192
#define K_QUMINUS 193
#define K_QDIV 194
#define K_QMOD 195
#define K_QCMP 196
#define K_JCASE_1 197
#define K_JRANGE_S 198
#define K_JRANGE_R 199
#define K_TESTGEQ_S 200
#define K_TESTGEQ_R 201
#define K_FPLUS 202
#define K_FMINUS 203
#define K_FTIMES 204
#define K_FDIV 205
#define K_FUMINUS 206
#define K_FCMPL 207
#define K_FCMPG 208
#define K_DPLUS 209
#define K_DMINUS 210
#define K_DTIMES 211
#define K_DDIV 212
#define K_DUMINUS 213
#define K_DCMPL 214
#define K_DCMPG 215
#define K_CONVNF 216
#define K_CONVND 217
#define K_CONVFN 218
#define K_CONVDN 219
#define K_CONVFD 220
#define K_CONVDF 221
#define K_CONVNC 222
#define K_CONVNS 223
#define K_CONVNQ 224
#define K_CONVQN 225
#define K_CONVQD 226
#define K_BOUND_2 227
#define K_NCHECK_2 228
#define K_GCHECK_2 229
#define K_ZCHECK_2 230
#define K_FZCHECK_2 231
#define K_DZCHECK_2 232
#define K_QZCHECK_2 233
#define K_ERROR_12 234
#define K_ALIGNC 235
#define K_ALIGNS 236
#define K_FIXCOPY 237
#define K_FLEXCOPY 238
#define K_STATLINK 239
#define K_SAVELINK 240
#define K_JPROC 241
#define K_SLIDE_1 242
#define K_SLIDEW_1 243
#define K_SLIDEF_1 244
#define K_SLIDED_1 245
#define K_SLIDEQ_1 246
#define K_RETURN 247
#define K_LNUM_2 248
#define K_BREAK_2 249
#define K_CASEJUMP_1 250
#define K_PACK 251
#define K_UNPACK 252

#define __OPCODES__(o) \
     o(ILLEGAL, ILLEGAL, "", 0, 1) \
     o(PUSH_x1, PUSH, "N", -1, 1) \
     o(PUSH_x1, PUSH, "N", 0, 1) \
     o(PUSH_x1, PUSH, "N", 1, 1) \
     o(PUSH_x1, PUSH, "N", 2, 1) \
     o(PUSH_x1, PUSH, "N", 3, 1) \
     o(PUSH_x1, PUSH, "N", 4, 1) \
     o(PUSH_x1, PUSH, "N", 5, 1) \
     o(PUSH_x1, PUSH, "N", 6, 1) \
     o(PUSH_x1, PUSH, "N", 7, 1) \
     o(PUSH_x1, PUSH, "N", 8, 1) \
     o(PUSH_x1, PUSH, "N", 9, 1) \
     o(PUSH_x1, PUSH, "N", 10, 1) \
     o(PUSH_1, PUSH, "1", 0, 2) \
     o(PUSH_2, PUSH, "2", 0, 3) \
     o(LDKW_1, LDKW, "1", 0, 2) \
     o(LDKW_2, LDKW, "2", 0, 3) \
     o(LDKF_1, LDKF, "1", 0, 2) \
     o(LDKF_2, LDKF, "2", 0, 3) \
     o(LOCAL_x1, LOCAL, "V", 0, 1) \
     o(LOCAL_1, LOCAL, "1", 0, 2) \
     o(LOCAL_2, LOCAL, "2", 0, 3) \
     o(OFFSET, OFFSET, "", 0, 1) \
     o(INDEXS, INDEXS, "", 0, 1) \
     o(INDEXW, INDEXW, "", 0, 1) \
     o(INDEXD, INDEXD, "", 0, 1) \
     o(LOADW, LOADW, "", 0, 1) \
     o(LOADS, LOADS, "", 0, 1) \
     o(LOADC, LOADC, "", 0, 1) \
     o(LOADF, LOADF, "", 0, 1) \
     o(STOREW, STOREW, "", 0, 1) \
     o(STORES, STORES, "", 0, 1) \
     o(STOREC, STOREC, "", 0, 1) \
     o(STOREF, STOREF, "", 0, 1) \
     o(LDLW_x1, LDLW, "N", -24, 1) \
     o(LDLW_x1, LDLW, "N", -20, 1) \
     o(LDLW_x1, LDLW, "N", -16, 1) \
     o(LDLW_x1, LDLW, "N", -12, 1) \
     o(LDLW_x1, LDLW, "N", -8, 1) \
     o(LDLW_x1, LDLW, "N", -4, 1) \
     o(LDLW_x2, LDLW, "N", 12, 1) \
     o(LDLW_x2, LDLW, "N", 16, 1) \
     o(LDLW_x2, LDLW, "N", 20, 1) \
     o(LDLW_x2, LDLW, "N", 24, 1) \
     o(LDLW_x2, LDLW, "N", 28, 1) \
     o(LDLW_x2, LDLW, "N", 32, 1) \
     o(LDLW_1, LDLW, "1", 0, 2) \
     o(LDLW_2, LDLW, "2", 0, 3) \
     o(LDLS_1, LDLS, "1", 0, 2) \
     o(LDLS_2, LDLS, "2", 0, 3) \
     o(LDLC_1, LDLC, "1", 0, 2) \
     o(LDLC_2, LDLC, "2", 0, 3) \
     o(LDLF_1, LDLF, "1", 0, 2) \
     o(LDLF_2, LDLF, "2", 0, 3) \
     o(STLW_x1, STLW, "N", -24, 1) \
     o(STLW_x1, STLW, "N", -20, 1) \
     o(STLW_x1, STLW, "N", -16, 1) \
     o(STLW_x1, STLW, "N", -12, 1) \
     o(STLW_x1, STLW, "N", -8, 1) \
     o(STLW_x1, STLW, "N", -4, 1) \
     o(STLW_x2, STLW, "N", 12, 1) \
     o(STLW_x2, STLW, "N", 16, 1) \
     o(STLW_x2, STLW, "N", 20, 1) \
     o(STLW_x2, STLW, "N", 24, 1) \
     o(STLW_x2, STLW, "N", 28, 1) \
     o(STLW_x2, STLW, "N", 32, 1) \
     o(STLW_1, STLW, "1", 0, 2) \
     o(STLW_2, STLW, "2", 0, 3) \
     o(STLS_1, STLS, "1", 0, 2) \
     o(STLS_2, STLS, "2", 0, 3) \
     o(STLC_1, STLC, "1", 0, 2) \
     o(STLC_2, STLC, "2", 0, 3) \
     o(STLF_1, STLF, "1", 0, 2) \
     o(STLF_2, STLF, "2", 0, 3) \
     o(LDGW_K, LDGW, "K", 0, 2) \
     o(LDGW_L, LDGW, "L", 0, 3) \
     o(LDGS_K, LDGS, "K", 0, 2) \
     o(LDGS_L, LDGS, "L", 0, 3) \
     o(LDGC_K, LDGC, "K", 0, 2) \
     o(LDGC_L, LDGC, "L", 0, 3) \
     o(LDGF_K, LDGF, "K", 0, 2) \
     o(LDGF_L, LDGF, "L", 0, 3) \
     o(STGW_K, STGW, "K", 0, 2) \
     o(STGW_L, STGW, "L", 0, 3) \
     o(STGS_K, STGS, "K", 0, 2) \
     o(STGS_L, STGS, "L", 0, 3) \
     o(STGC_K, STGC, "K", 0, 2) \
     o(STGC_L, STGC, "L", 0, 3) \
     o(STGF_K, STGF, "K", 0, 2) \
     o(STGF_L, STGF, "L", 0, 3) \
     o(LDNW_x1, LDNW, "N", -16, 1) \
     o(LDNW_x1, LDNW, "N", -12, 1) \
     o(LDNW_x1, LDNW, "N", -8, 1) \
     o(LDNW_x1, LDNW, "N", -4, 1) \
     o(LDNW_x1, LDNW, "N", 0, 1) \
     o(LDNW_x1, LDNW, "N", 4, 1) \
     o(LDNW_x1, LDNW, "N", 8, 1) \
     o(LDNW_x1, LDNW, "N", 12, 1) \
     o(LDNW_x1, LDNW, "N", 16, 1) \
     o(LDNW_x1, LDNW, "N", 20, 1) \
     o(LDNW_x1, LDNW, "N", 24, 1) \
     o(LDNW_x1, LDNW, "N", 28, 1) \
     o(LDNW_x1, LDNW, "N", 32, 1) \
     o(LDNW_1, LDNW, "1", 0, 2) \
     o(LDNW_2, LDNW, "2", 0, 3) \
     o(STNW_x1, STNW, "N", -16, 1) \
     o(STNW_x1, STNW, "N", -12, 1) \
     o(STNW_x1, STNW, "N", -8, 1) \
     o(STNW_x1, STNW, "N", -4, 1) \
     o(STNW_x1, STNW, "N", 0, 1) \
     o(STNW_x1, STNW, "N", 4, 1) \
     o(STNW_x1, STNW, "N", 8, 1) \
     o(STNW_x1, STNW, "N", 12, 1) \
     o(STNW_x1, STNW, "N", 16, 1) \
     o(STNW_x1, STNW, "N", 20, 1) \
     o(STNW_x1, STNW, "N", 24, 1) \
     o(STNW_x1, STNW, "N", 28, 1) \
     o(STNW_x1, STNW, "N", 32, 1) \
     o(STNW_1, STNW, "1", 0, 2) \
     o(STNW_2, STNW, "2", 0, 3) \
     o(LDIW, LDIW, "", 0, 1) \
     o(LDIS, LDIS, "", 0, 1) \
     o(LDIC, LDIC, "", 0, 1) \
     o(LDIF, LDIF, "", 0, 1) \
     o(STIW, STIW, "", 0, 1) \
     o(STIS, STIS, "", 0, 1) \
     o(STIC, STIC, "", 0, 1) \
     o(STIF, STIF, "", 0, 1) \
     o(LOADD, LOADD, "", 0, 1) \
     o(STORED, STORED, "", 0, 1) \
     o(LDKD_1, LDKD, "1", 0, 2) \
     o(LDKD_2, LDKD, "2", 0, 3) \
     o(LOADQ, LOADQ, "", 0, 1) \
     o(STOREQ, STOREQ, "", 0, 1) \
     o(LDKQ_1, LDKQ, "1", 0, 2) \
     o(LDKQ_2, LDKQ, "2", 0, 3) \
     o(INCL_1, INCL, "1", 0, 2) \
     o(DECL_1, DECL, "1", 0, 2) \
     o(DUP, DUP, "N", 0, 1) \
     o(DUP, DUP, "N", 1, 1) \
     o(DUP, DUP, "N", 2, 1) \
     o(SWAP, SWAP, "", 0, 1) \
     o(POP_1, POP, "1", 0, 2) \
     o(PLUS, PLUS, "", 0, 1) \
     o(MINUS, MINUS, "", 0, 1) \
     o(TIMES, TIMES, "", 0, 1) \
     o(UMINUS, UMINUS, "", 0, 1) \
     o(AND, AND, "", 0, 1) \
     o(OR, OR, "", 0, 1) \
     o(NOT, NOT, "", 0, 1) \
     o(INC, INC, "", 0, 1) \
     o(DEC, DEC, "", 0, 1) \
     o(BITAND, BITAND, "", 0, 1) \
     o(BITOR, BITOR, "", 0, 1) \
     o(BITXOR, BITXOR, "", 0, 1) \
     o(BITNOT, BITNOT, "", 0, 1) \
     o(LSL, LSL, "", 0, 1) \
     o(LSR, LSR, "", 0, 1) \
     o(ASR, ASR, "", 0, 1) \
     o(ROR, ROR, "", 0, 1) \
     o(DIV, DIV, "", 0, 1) \
     o(MOD, MOD, "", 0, 1) \
     o(EQ, EQ, "", 0, 1) \
     o(LT, LT, "", 0, 1) \
     o(GT, GT, "", 0, 1) \
     o(LEQ, LEQ, "", 0, 1) \
     o(GEQ, GEQ, "", 0, 1) \
     o(NEQ, NEQ, "", 0, 1) \
     o(JEQ_S, JEQ, "S", 0, 2) \
     o(JEQ_R, JEQ, "R", 0, 3) \
     o(JLT_S, JLT, "S", 0, 2) \
     o(JLT_R, JLT, "R", 0, 3) \
     o(JGT_S, JGT, "S", 0, 2) \
     o(JGT_R, JGT, "R", 0, 3) \
     o(JLEQ_S, JLEQ, "S", 0, 2) \
     o(JLEQ_R, JLEQ, "R", 0, 3) \
     o(JGEQ_S, JGEQ, "S", 0, 2) \
     o(JGEQ_R, JGEQ, "R", 0, 3) \
     o(JNEQ_S, JNEQ, "S", 0, 2) \
     o(JNEQ_R, JNEQ, "R", 0, 3) \
     o(JLTZ_S, JLTZ, "S", 0, 2) \
     o(JGTZ_S, JGTZ, "S", 0, 2) \
     o(JLEQZ_S, JLEQZ, "S", 0, 2) \
     o(JGEQZ_S, JGEQZ, "S", 0, 2) \
     o(JNEQZ_S, JNEQZ, "S", 0, 2) \
     o(JNEQZ_R, JNEQZ, "R", 0, 3) \
     o(JEQZ_S, JEQZ, "S", 0, 2) \
     o(JEQZ_R, JEQZ, "R", 0, 3) \
     o(JUMP_S, JUMP, "S", 0, 2) \
     o(JUMP_R, JUMP, "R", 0, 3) \
     o(QPLUS, QPLUS, "", 0, 1) \
     o(QMINUS, QMINUS, "", 0, 1) \
     o(QTIMES, QTIMES, "", 0, 1) \
     o(QUMINUS, QUMINUS, "", 0, 1) \
     o(QDIV, QDIV, "", 0, 1) \
     o(QMOD, QMOD, "", 0, 1) \
     o(QCMP, QCMP, "", 0, 1) \
     o(JCASE_1, JCASE, "1", 0, 2) \
     o(JRANGE_S, JRANGE, "S", 0, 2) \
     o(JRANGE_R, JRANGE, "R", 0, 3) \
     o(TESTGEQ_S, TESTGEQ, "S", 0, 2) \
     o(TESTGEQ_R, TESTGEQ, "R", 0, 3) \
     o(FPLUS, FPLUS, "", 0, 1) \
     o(FMINUS, FMINUS, "", 0, 1) \
     o(FTIMES, FTIMES, "", 0, 1) \
     o(FDIV, FDIV, "", 0, 1) \
     o(FUMINUS, FUMINUS, "", 0, 1) \
     o(FCMPL, FCMPL, "", 0, 1) \
     o(FCMPG, FCMPG, "", 0, 1) \
     o(DPLUS, DPLUS, "", 0, 1) \
     o(DMINUS, DMINUS, "", 0, 1) \
     o(DTIMES, DTIMES, "", 0, 1) \
     o(DDIV, DDIV, "", 0, 1) \
     o(DUMINUS, DUMINUS, "", 0, 1) \
     o(DCMPL, DCMPL, "", 0, 1) \
     o(DCMPG, DCMPG, "", 0, 1) \
     o(CONVNF, CONVNF, "", 0, 1) \
     o(CONVND, CONVND, "", 0, 1) \
     o(CONVFN, CONVFN, "", 0, 1) \
     o(CONVDN, CONVDN, "", 0, 1) \
     o(CONVFD, CONVFD, "", 0, 1) \
     o(CONVDF, CONVDF, "", 0, 1) \
     o(CONVNC, CONVNC, "", 0, 1) \
     o(CONVNS, CONVNS, "", 0, 1) \
     o(CONVNQ, CONVNQ, "", 0, 1) \
     o(CONVQN, CONVQN, "", 0, 1) \
     o(CONVQD, CONVQD, "", 0, 1) \
     o(BOUND_2, BOUND, "2", 0, 3) \
     o(NCHECK_2, NCHECK, "2", 0, 3) \
     o(GCHECK_2, GCHECK, "2", 0, 3) \
     o(ZCHECK_2, ZCHECK, "2", 0, 3) \
     o(FZCHECK_2, FZCHECK, "2", 0, 3) \
     o(DZCHECK_2, DZCHECK, "2", 0, 3) \
     o(QZCHECK_2, QZCHECK, "2", 0, 3) \
     o(ERROR_12, ERROR, "12", 0, 4) \
     o(ALIGNC, ALIGNC, "", 0, 1) \
     o(ALIGNS, ALIGNS, "", 0, 1) \
     o(FIXCOPY, FIXCOPY, "", 0, 1) \
     o(FLEXCOPY, FLEXCOPY, "", 0, 1) \
     o(STATLINK, STATLINK, "", 0, 1) \
     o(SAVELINK, SAVELINK, "", 0, 1) \
     o(JPROC, JPROC, "", 0, 1) \
     o(SLIDE_1, SLIDE, "1", 0, 2) \
     o(SLIDEW_1, SLIDEW, "1", 0, 2) \
     o(SLIDEF_1, SLIDEF, "1", 0, 2) \
     o(SLIDED_1, SLIDED, "1", 0, 2) \
     o(SLIDEQ_1, SLIDEQ, "1", 0, 2) \
     o(RETURN, RETURN, "", 0, 1) \
     o(LNUM_2, LNUM, "2", 0, 3) \
     o(BREAK_2, BREAK, "2", 0, 3) \
     o(CASEJUMP_1, CASEJUMP, "1", 0, 2) \
     o(PACK, PACK, "", 0, 1) \
     o(UNPACK, UNPACK, "", 0, 1) \
     o(ILLEGAL, ILLEGAL, "", 0, 1) \
     o(ILLEGAL, ILLEGAL, "", 0, 1) \
     o(ILLEGAL, ILLEGAL, "", 0, 1)
